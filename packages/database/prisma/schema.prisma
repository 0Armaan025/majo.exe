datasource db {
 provider  = "postgresql"
 url       = env("DATABASE_URL")
 directUrl = env("DIRECT_URL")
}

generator client {
 provider = "prisma-client-js"
}

model User {
 id            String      @id @default(cuid())
 discordId     String      @unique @map(name: "discord_id")
 name          String
 global_name   String      @map(name: "global_name")
 avatar        String?
 discriminator String
 public_flags  BigInt      @map(name: "public_flags")
 flags         BigInt
 locale        String?
 nitro         Int?
 verified      Boolean?
 email         String?     @unique
 emailVerified DateTime?   @map(name: "email_verified")
 accounts      Account[]
 sessions      Session[]
 guildLogs     GuildLogs[]
 guildXp       GuildXp[]

 @@map(name: "users")
}

model Account {
 id                String  @id @default(cuid())
 userId            String  @map("user_id")
 type              String
 provider          String
 providerAccountId String  @map("provider_account_id")
 refresh_token     String? @db.Text
 access_token      String? @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String? @db.Text
 session_state     String?
 user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique @map("session_token")
 userId       String   @map("user_id")
 expires      DateTime
 createdAt    DateTime @default(now()) @map(name: "created_at")
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map(name: "sessions")
}

model VerificationToken {
 identifier String
 token      String   @unique
 expires    DateTime

 @@unique([identifier, token])
 @@map(name: "verification_tokens")
}

model Suggestions {
 id        String   @id @default(cuid())
 userId    String
 guildId   String?
 message   String
 createdAt DateTime @default(now()) @map(name: "created_at")

 @@map(name: "suggestions")
}

model Guild {
 id               String       @id @default(cuid())
 guildId          String       @unique @map(name: "guild_id")
 profanityLevel   Int          @default(0) @map(name: "profanity_level")
 embedColor       String       @default("#5865F2") @map(name: "embed_color")
 embedLastChanged DateTime?    @default(now()) @map(name: "embed_last_changed")
 lastUpdated      DateTime     @default(now()) @map(name: "last_updated")
 guildLogs        GuildLogs[]
 guildXp          GuildXp[]
 GuildJoin        GuildJoin[]
 GuildLeave       GuildLeave[]

 @@map(name: "guilds")
}

model GuildLogs {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 authorId  String   @map(name: "author_id")
 content   String
 type      String
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User     @relation(fields: [authorId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_logs")
}

model GuildXp {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 userId    String   @map(name: "user_id")
 xp        Int      @default(0)
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_xp")
}

model GuildJoin {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 joins   Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_joins")
}

model GuildLeave {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 leaves  Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_leaves")
}
